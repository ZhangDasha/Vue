	前后端分离 / 工程化建设
	前端就业形势，需求量大，但是由于技术栈更新迭代块，用人标准提高。
	对于目前这种产品驱动技术发展的模式，迎合市场，成为了求职者的不二选择。
	MVVM的开发模式，改变了设计模式，与合作方式。
	Vue渐进式框架

	vue-loader是一个webpack的loader；可以将vue文件转换为JS模块

课题的主要研究内容：
	1. 后台包装请求，伪装真实线上链接向QQ音乐后台发送jsonp请求。
	2. 处理数据，截取有效字段，并对其进行序列化存储。
	3. 组件式开发，合理拆分页面、布置代码。
	4. 使用vue-router实现跳转，在首次加载后页面切换如App般流畅体验。
	5. 状态管理，初次体验vuex的集中式状态管理模式，现学现用。
	6. 提升css开发体验，应用stylus预编译程序编写css代码。
	7. 实现组件嵌套复用，父子组件交互通信与传值。
	8. 结合浏览器特性以及数据获取时效性特点，尝试工程化开发解决问题实际存在的问题

------------------------------------------------------------------------------------------------------------------------


关键技术介绍：
主技术	Vue
	Vue.js 是一套用于构建用户界面的渐进式框架。与其他大型的框架不同，Vue被设计为可以自底向上增量式开发，这一特性奠定了它的友好性。Vue.js 的核心库文件只关注视图层，这一设定使其便于与第三方库或既有项目整合。
	“简单却不失优雅，小巧而不乏大匠”这句话正是业界人员对Vue.js 的评价。Vue.js 具有两个核心点：
	一、响应式数据绑定
	所谓响应式是指：当数据发生变化时，Vue会自动捕获监听更新视图。它的原理是后台利用了Object.definedProperty( )方法的setter/getter实现数据代理，监控用户对数据的操作。这也是为什么Vue.js 不支持IE8及其以下浏览器的原因。
	二、组件式开发
	组件是Vue.js最强大的功能之一。通俗些说组件就是自定义元素，经过Vue.js编译器的包装处理为它添加了特殊功能，使其可以扩展HTML元素，封装可重用的代码。Vue.js组件由作用域不同可为全局组件与局部组件。全局组件一旦在主文件中引入全局都可使用，局部组件则只是在Vue.js的某个实例中作用。
	
Vue全家桶介绍：
	Vuex
	Vuex是一个服务于Vue.js应用程序开发的状态管理模式。它采用集中式存储、管理组件状态，并制定相应规则保证该状态以一种可预测的方式进行变化。简而言之当你在开发一个大型单页面应用时，会出现多个视图组件依赖相同一个状态，如果某个组件的行为需要变更这个状态，其余组件对此依赖就会变得异常复杂。这时使用Vuex把组件的共享状态抽离出来，当做一个全局的单例模式进行管理。这样不管你在何时改变状态，都会响应式地通知使用该状态的组件作出相应的修改。
	Vuex的安装与使用也是非常的简单。只需要在项目根目录下打开控制台输入：npm install vuex --save -dev就可轻松载入依赖包。然后在构建好的项目主文件入口添加这样两行代码：import Vuex from 'vuex'    Vue.use(Vuex)就可开始使用，具体使用详情笔者在此就不做过多介绍了。
	vue-router
		vue-router是Vue.js官方指定的路由插件，它能与vue.js紧密合作实现单页面应用的构建。Vue.js的单页面应用是基于路由和组件，路由用于设定访问路径，并借此将路径和组件映射起来。传统的页面是用一些超链接来实现页面切换与跳转，但在vue-router构建的单页面应用中页面的跳转其实是在组件之间切换。
		vue-router可抽象的理解为是<a>标签的升级版，你只需要在创建好的router实例中配置相应的组件路径，就可体验到超链接不能达到的效果。在首次载入后，同级组件可无间隙切换，并且还具有浏览器的前进与回退功能。		
	vue-cli
	vue-cli是Vue.js的脚手架工具，负责项目底层的构建。主要作用有生成目录结构、本地调试、代码部署、热加载、单元测试。
	同样vue-cli的安装需要有npm支持，在控制台输入：npm install -g vue-cli就可实现全局作用。在此官方为我们提供了6中模版分别是：browserify、browserify-simple、pwa、simple、webpack、webpack-simple。根据项目需求选择合适的构建模版，然后在对应的项目目录下部署代码就可拥有自己的Vue.js项目了。vue-cli还为我们实现了热加载，当我们在开发工具中编辑好代码保存后，不需要我们手动刷新vue-cli就会自动将代码加载到本地服务器并在浏览器上进行渲染。

前端基础知识介绍
	html5:audio
	html5作为超文本语言的第五版，尽管和SGML在标记上的具有相似性，但HTML5的句法并不再是基于它，而是被设计向后兼容因此也可解析老版的HTML。不同与使用HTML4时复杂的声明，使用HTML5只需要在文档开头加上<!DOCTYPE HTML>就会触发和标准模式兼容的渲染模式。
	HTML5新增了许多新标签和属性。其中包括了语义性更强的文档标签<section>、<article>、<nav>等；同时为了减少网页浏览器对需要插件的丰富性网络应用服务，例如：Adobe Flash、Microsoft Silverlight与Oracle JavaFX的需求，因此提供了更强大的富媒体标签<audio>、<video>，而本项目的播放内核正是建立在<audio>标签的特殊属性上。同时为了突破浏览器对客户端存储的限制，HTML5提供了只在当前回话有效的sessionStorage和永久有效的localStorage，本项目中搜索历史、歌曲收藏就是借用了localStorage实现的。
	css
	css全局层叠样式表或级联样式表，是一种用来为结构化文档添加样式的计算机语言，目前由W3C定义和维护。CSS不能单独使用，必须与HTML或XML一起协调工作，CSS可以用于设定页面布局、设定页面元素样式、设定适用于所有网页的全局样式
	本项目使用的是最新版本的CSS3并结合CSS预处理器Stylus，采用内部样式与外部样式混合搭配的两种定义方式。代码构建为实现响应式采用大量弹性布局与浮动布局，并且针对不同内核的浏览器还进行了特殊化处理。
	jsonp： 跨域请求
	jsonp是一种非官方的跨域数据交互协议。众所周知Ajax由于同源限制不能跨域请求数据，在实际开发中人们发现拥有src属性的<script>、<img>和<iframe>标签可以实现跨域请求，恰巧我们已经知道有一种高叫做JSON的纯字符数据格式可以简洁的描述复杂数据，而且由于JSON被JavaScrip原生支持，所以我们可以随心所欲的在客户端处理这种格式的数据。于是乎在本地我们可以像是调用一般脚本一样，来调用跨域服务器上动态生成的且包含所需数据的后缀名为json的文件。
	虽然jsonp与JSON就差一个字母，但两者却根本不是一回事：JSON是一种描述数据的格式，而jsonp着是依次为基础的一种信息传递的方法。
	可能会有人认为ajax和jsonp这两种技术从调用方式看起来很像，目的也一样，都是请求一个url，然后把服务器返回的数据进行处理。但两者的技术支持却完全不同，ajax的核心是通过HTTP协议发送XMLHttpRequest请求，而jsonp的核心则是利用<script>标签的scr属性来调用服务器的JavaScrip脚本。
第三方库介绍
	better-scroll
	better-scroll是一款重点解决移动端各种滚动场景需求的插件。它的核心理念是借鉴iscroll，它的API设计基本兼容iscroll，在iscroll的基础上又扩展了一些功能以及做了一些性能优化。此外better-scroll是基于原生的JavaScript实现的，所以兼容性很好，又因为它具有详细的API讲解和用例因此很适合学习使用。	
	本项目中的列表滚动以及轮播图的实现都是依赖它实现的。使用时只需要将better-scroll作用在最外层的父容器上，然后当内容元素宽度大于父元素时，就会触发滚动机制。需要特别注意的是better-scroll只会作用于容器的第一个子元素上。
	fastclick
	fastclick是用来解决移动端浏览器在派发点击事件的时候，通常会出现300ms左右延迟的问题。产生这个问题的原因是在移动端浏览器双击实践会缩放页面，导致click事件在PC端出现判断延迟。
	fastclick的实现原理是在检测到touchend事件的时候，会通过DOM自定义事件立即触发模拟一个click事件，并将浏览器在300ms之后真正的click事件阻止掉。
	good-storage
	good-storage是经过包装后的Storage工具库。引入此文件后只需借用good-scroll为我们暴露出的方法接口并传入自己的参数，就可轻松实现对localStorage或sessionStorage的读写操作。

	开发环境：macOS 10.13.4系统平台
	开发工具：Sublime Text 3、Chrome
	硬件环境：Mac Pro， CPU 2.7GHz，RAM8GB，Intel Core i5

------------------------------------------------------------------------------------------------------------------------

歌源获取失败的原因：
	qq音乐做了host(主机)和referer(引荐)的校验，即该请求是在qq音乐该页面下发送的才会成功！！
解决方法：
	axios做代理，设置header属性包装host与referer，以此绕过host限制。
使用时将请求的参数拼接在请求url上，然后调用jsonp方法。在此封装了两个函数，一个是将参数拼接在url上，另一个是将jsonp方法Promise化，方便我们使用。具体见：src/common/js/jsonp.js

需求分析：
	本系统所有数据完全来自QQ音乐，大部分接口都是jsonp形式，抓取比较容易，但其中一些接口限制了host，不能直接获取，需要用axios做代理设置header属性，通过包装host与referer以此绕过host限制。对于像歌源这些敏感且具有知识产权的信息，QQ音乐官方不但设置了host与referer验证，更在url中增加了vkey和uid这两种随机生成的验证参数。所幸天无绝人之路，通过笔者在国内外各种论坛筛选查找，终于找到了对应的算法逻辑与方法实现。具体详情见：src/api/handlesongurl.js
	系统具体需求如下：
		1. 推荐页面：需要获取轮播图和排名前30的热门歌单信息，包括歌单图片、标题和简介；对于热门歌单下的二级页面需要获取歌名和歌手信息；对于歌曲下三级页面还需要获取歌源以及该歌曲的专辑封面。
		2. 歌手页面：需要获取排名前100的歌手信息，包括歌手头像和歌手姓名；对于歌手下的二级页面需要获取该歌手的歌曲列表；对于歌曲下三级页面还需要获取歌源以及该歌曲的专辑封面。
		3. 排行页面：需要获取13种榜单信息，包括图片和该榜单的前三首歌曲；对于榜单下的二级页面还需要获取具体的歌曲列表；同样对于歌曲下三级页面还需要获取歌源以及该歌曲的专辑封面。
		4. 搜索页面：需要获取近期的热门搜索以及本地缓存中的历史搜索记录；
		5. 个人中心：需要从本地缓存获取添加收藏的歌曲信息

功能分析：
	1. 实现了轮播图无缝循环播放。此外由于本系统的所有资源均来自QQ音乐服务器，因此数据的获取受网络环境影响存在不确定性。轮播图的主体结构是由图片高度撑起又因为W3C规定图片的加载是异步进行的且一般图片资源相对较大，所以一旦由于网络不好图片资源不能及时加载就会导致页面塌陷，发生下层结构向上顶起的现象，为了解决这个缺陷，在设计时融入了数据驱动理念，当前端延迟接收到图片资源时，会重新触发页面渲染。
	2. 为了提升用户体验和首屏加载速度，首页热门歌单加载运用了懒加载技术，在初次加载时只加载首屏大小的内容然后在用户下滑操作时才会依次加载更多内容。
	3. 联系人列表联动布局
	4. 作为本系统的核心部位，播放内核是建立在HTML5的audio标签上实现的。全屏播放界面，首先布局上页面的主体是一个跟随音乐播放旋转的圆形唱片图。下方是一个歌曲进度条，使用者可以通过点击或者拖拽实现跳转到歌曲的任意时间段。最底部是五种功能键，从左到右分别是：列表歌曲循环模式、切换上一首、开始/暂停、切换下一首、歌曲收藏。其中有三种歌曲循环模式：随机循环、单曲循环、列表循环，歌曲收藏功能则是利用了HTML5新增的Storage属性。
	小窗口播放界面是全局组件样式结构是左右布局，保留了一个开始/暂停键，添加了播放列表。在播放列表界面使用者不但可以切换歌曲循环模式，而且还可以对播放歌曲进行删除、收藏操作。
	5. 搜索界面，不但实现了搜索功能而且还进行了异常操作处理，当用户搜索内容不存在会及时作出提示，此外还利用Storage实现了对搜索历史的记录。用户可以删除单个记录也可以清空记录。


------------------------------------------------------------------------------------------------------------------------
	第五部分：
		一、数据的获取
			1. 后台代理的代码实现
			2. 数据请求处理的关键代码 + 获取到的数据截图
		二、基础组件的关键技术点介绍
			1. Scroll滑动组件的实现
			2. 歌曲进度条的实现
		三、预定义功能性函数的实现
			1. Storage的包装与实现
			2. 混入(mixins)技术的使用
				是一种分发 Vue 组件中可复用功能的非常灵活的方式。混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。
		四、路由的配置与使用
		五、Vuex状态管理的使用

1.徐頔, 朱广华, 贾瑶. 基于VueJs的WEB前端开发研究[J]. 科技风, 2017(14):69-69.
5.Gore, Anthony.  Full-Stack Vue.js 2 and Laravel 5 : bring the frontend and backend together with Vue, Vuex, and Laravel Birmingham : Packt Publishing, 2017.
6.Halliday, Paul. Vue.js 2 design patterns and best practices : build enterprise-ready, modular Vue.js applications with Vuex and Nuxt[D]. 	Birmingham : Packt Publishing, 2018.
7.麦冬, 陈涛, 梁宗湾. 轻量级响应式框架Vue.js应用分析[J]. 信息与电脑(理论版), 2017(7):58-59.
8.张耀春 黄轶 苏伟 著 Vue.js权威指南 北京：电子工业出版社  2016
9.]陶国荣 著 HTML5实战 北京：机械出版社， 2011
10.Wiley D L. Head First HTML with CSS & XHTML[J]. 2006.
11.李军. Method and device for JSONP data request:, CN 103368980 A[P]. 2013.
12.Germer C. Ensuring Fluent Gameplay in MusiGuess - Forward-Caching JSON/JSONP with Nginx[J]. Computers & Security, 2016, 65(C):121-134.
13.周晓黎. Ajax跨域访问Web Services[J]. 电脑编程技巧与维护, 2014(8):93-96.
14.Bates S. iSCROLL[J]. Wilson Quarterly, 2013.
15.sessionStorage, localStorage. HTML5 Web Storage[J]. Dr Dobbs Journal.
16.梁睿坤 著 Vue2 实战揭秘 电子工业出版社 2017
17 侯利军 著 精通Web标准网页布局---XHTML+CSS+JavaScript 人民邮电出版社 ，2007.






